/* NMRSignal.java
 *
 * Copyright (C) 1997, 1998, 1999  Dr. Christoph Steinbeck
 *
 * Contact: steinbeck@ice.mpg.de
 *
 * This software is published and distributed under artistic license.
 * The intent of this license is to state the conditions under which this Package 
 * may be copied, such that the Copyright Holder maintains some semblance
 * of artistic control over the development of the package, while giving the 
 * users of the package the right to use and distribute the Package in a
 * more-or-less customary fashion, plus the right to make reasonable modifications.
 *
 * THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND 
 * FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * The complete text of the license can be found in a file called LICENSE 
 * accompanying this package.
 */

package seneca.core;

import java.io.Serializable;

/**
 * A class to store the properties of a single NMR signal
 */

/*
 * This is, as far as I can see, the most sentitive part of the datastructures
 * with respect to the process of storing and re- storing of SENECA datasets.
 */

public class NMRSignal implements Serializable {

    /**
     *
     */
    private static final long serialVersionUID = 1L;

    public int dim;

	/*
     * Here it would be nice to have a convention of which axis to store at
	 * which place in 'shift'. It is straightforward to store the signals of the
	 * directly detected nucleus in 'shift[0]. Let take this as the only
	 * convention so far and let's see where else in the code the proble
	 * re-appears.
	 */
    /**
     * Am array of doubles to store the chemical shift of
     */
    public float shift[];
    public String[] nucleus;

    /* Signal intensity in arbitrary values */
    public float intensity;

    /* Normalization factor for signal intensity to yield full integer values */
    public float normalizeFactor = 1;
    public int phase;
    public static int DIM_ONE = 1, DIM_TWO = 2, DIM_THREE = 3, DIM_FOUR = 4;
    public static int SHIFT_PROTON = 0, SHIFT_HETERO = 1;
    public static int PHASE_NEGATIVE = 2, PHASE_POSITIVE = 1, PHASE_NONE = 0;
    public static String[] PHASENAMES = {"NONE", "POSITIVE", "NEGATIVE"};

    public NMRSignal(String[] nucleus) {
        this.dim = nucleus.length;
        this.shift = new float[dim];
        this.nucleus = nucleus;
        for (int f = 0; f < dim; f++)
            shift[f] = 0;
        intensity = 1;
        normalizeFactor = 1;
        phase = PHASE_POSITIVE;
    }

    public NMRSignal(String[] nucleus, float[] shift, float intensity, int phase) {
        this.dim = nucleus.length;
        this.shift = shift;
        this.nucleus = nucleus;
        this.intensity = intensity;
        this.normalizeFactor = 1;
        this.phase = phase;
    }

    public void setShift(float sshift, String nnucleus) {
        for (int f = 0; f < nucleus.length; f++) {
            if (nucleus[f].equals(nnucleus)) {
                shift[f] = sshift;
                break;
            }
        }

    }

    public void setShift(float sshift, int dim) {
        shift[dim] = sshift;
    }

    public float getShift(String nnucleus) {
        for (int f = 0; f < nucleus.length; f++) {
            if (nucleus[f].equals(nnucleus)) {
                return shift[f];
            }
        }

        return Float.MAX_VALUE;

    }

    public float getShift(int dim) {
        return shift[dim];
    }

    
    public String toString() {
        String s = "";
        s += dim + " -dimensional NMRSignal for nuclei ";
        for (int f = 0; f < nucleus.length; f++)
            s += nucleus[f] + "; ";
        s += "\nShiftlist: ";
        for (int f = 0; f < shift.length; f++)
            s += shift[f] + "; ";
        s += "\n\n";
        return s;
    }

}