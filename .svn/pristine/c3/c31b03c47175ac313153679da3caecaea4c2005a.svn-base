/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package seneca.structgen.ea.crossover;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;
import org.openscience.cdk.silent.MolecularFormula;
import org.openscience.cdk.silent.SilentChemObjectBuilder;
import org.openscience.cdk.structgen.RandomGenerator;
import org.openscience.cdk.structgen.SingleStructureRandomGenerator;
import org.openscience.cdk.templates.MoleculeFactory;
import org.openscience.cdk.tools.manipulator.AtomContainerManipulator;
import org.openscience.cdk.tools.manipulator.MolecularFormulaManipulator;
import seneca.core.StructureIO;
import seneca.structgen.ea.Individual;
import seneca.structgen.ea.Population;

import java.util.List;

/**
 * @author kalai
 */
public class CrossOverTest {

    private SingleStructureRandomGenerator ssrg = null;

    public CrossOverTest() throws Exception {
        ssrg = new SingleStructureRandomGenerator();
    }

    public Population<Individual> createIndividualsFromMol() throws Exception {
        Population<Individual> individualsForCrossOver = new Population<Individual>();
        IAtomContainer dad = StructureIO.readMol("/Users/kalai/Develop/SenecaDevelop/examples/C10H16/camphene.mol");
        IAtomContainer mom = StructureIO.readMol("/Users/kalai/Develop/SenecaDevelop/examples/C10H16/ene.mol");
        individualsForCrossOver.add(makeIndividual(dad));
        individualsForCrossOver.add(makeIndividual(mom));
        return individualsForCrossOver;
    }

    public Population<Individual> createIndividualsUsing(String MF) throws CDKException {
        Population<Individual> individualsForCrossOver = new Population<Individual>();
        MolecularFormula newmolecularFormula = (MolecularFormula) MolecularFormulaManipulator.getMolecularFormula(MF, SilentChemObjectBuilder.getInstance());
        System.out.println("Molecular formula - " + MF);
        IAtomContainer atomContainer = MolecularFormulaManipulator.getAtomContainer(newmolecularFormula);
        atomContainer = AtomContainerManipulator.removeHydrogens(atomContainer);

        ssrg.setAtomContainer(atomContainer);

        IAtomContainer startMolecule = ssrg.generate();
        individualsForCrossOver.add(makeIndividual(startMolecule));
        startMolecule = ssrg.generate();
        individualsForCrossOver.add(makeIndividual(startMolecule));

        return individualsForCrossOver;
    }

    public Population<Individual> createIndividuals() throws CDKException {
        Population<Individual> individualsForCrossOver = new Population<Individual>();
        IAtomContainer atomContainer = MoleculeFactory.makeCyclohexene();
        atomContainer = AtomContainerManipulator.removeHydrogens(atomContainer);
        individualsForCrossOver.add(makeIndividual(atomContainer));

        RandomGenerator rg = new RandomGenerator(atomContainer);
        IAtomContainer proposeStructure = rg.proposeStructure();
        individualsForCrossOver.add(makeIndividual(proposeStructure));

        return individualsForCrossOver;
    }

    public Population<Individual> createIndividualsFromFile(String file) throws CDKException, Exception {
        Population<Individual> individualsForCrossOver = new Population<Individual>();
        List<IAtomContainer> atomContainers = StructureIO.readSDF(file);
        for (IAtomContainer atomContainer : atomContainers) {
            individualsForCrossOver.add(makeIndividual(atomContainer));
        }
        return individualsForCrossOver;
    }

    public Individual makeIndividual(IAtomContainer molecule) {
        Individual individual = new Individual(molecule);
        return individual;
    }

    public static void main(String[] args) throws Exception {
            /*
             * example formulas: C6H10S,C16H14O5,C10H14O,C6H6
             */
        CrossOverTest test = new CrossOverTest();
        Population<Individual> toBeCrossed = test.createIndividualsUsing("C10H8O4");
        // Population<Individual> toBeCrossed = test.createIndividualsFromMol();
        new CrossOver().cross(toBeCrossed);
        //    Population<Individual> toBeCrossed = test.createIndividualsFromFile("/Users/kalai/Downloads/C15H20O3/artabsin.sdf");
//            Population<Individual> toBeCrossed = test.createIndividuals();
        // Population<Individual> toBeCrossed = test.createIndividualsFromMol();


    }
}
