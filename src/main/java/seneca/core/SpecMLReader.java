/* SpecMLReader.java
 *
 * Copyright (C) 1997, 1998, 1999  Dr. Christoph Steinbeck
 *
 * Contact: steinbeck@ice.mpg.de
 *
 * This software is published and distributed under artistic license.
 * The intent of this license is to state the conditions under which this Package 
 * may be copied, such that the Copyright Holder maintains some semblance
 * of artistic control over the development of the package, while giving the 
 * users of the package the right to use and distribute the Package in a
 * more-or-less customary fashion, plus the right to make reasonable modifications.
 *
 * THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND 
 * FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * The complete text of the license can be found in a file called LICENSE 
 * accompanying this package.
 */

package seneca.core;

import org.apache.log4j.Logger;
import org.openscience.cdk.CDKConstants;
import org.openscience.cdk.interfaces.IAtom;
import org.openscience.cdk.interfaces.IAtomContainer;
import org.openscience.cdk.silent.Atom;
import org.openscience.cdk.silent.AtomContainer;
import org.openscience.cdk.tools.manipulator.MolecularFormulaManipulator;
import org.openscience.cdk.tools.periodictable.PeriodicTable;

import casekit.model.NMRSignal;
import casekit.model.NMRSpectrum;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;
import seneca.gui.Seneca;
import seneca.structgen.sa.regular.ConvergenceAnnealingEngine;

import javax.swing.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class SpecMLReader extends DefaultHandler implements SpecMLConstants {

    Document document = null;

    List atoms = new ArrayList();
    SenecaDataset sd = null;

    static boolean docStart = false;
    static boolean parsingDone = true;
    static org.w3c.dom.Node startNode = null;
    private static final Logger logger = Logger.getLogger(SpecMLReader.class);
    private boolean hasAnnealingOptions = false;
    private static boolean shouldExit = false;

    public SpecMLReader(File file, boolean shouldExit) {
        System.out.println("using SpecML reader");
        this.shouldExit = shouldExit;
        document = openDocument(file);
        readSDDomTree();
        parsingDone = true;
    }

    public static org.w3c.dom.Document openDocument(File file) {
        org.w3c.dom.Document document = null;
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.parse(file);

        } catch (SAXParseException spe) {
            // Error generated by the parser
            logger.debug("\n** Parsing error" + ", line "
                    + spe.getLineNumber() + ", uri " + spe.getSystemId() + "   " + spe.getMessage());

            // Use the contained exception, if any
            Exception x = spe;
            if (spe.getException() != null)
                x = spe.getException();
            x.printStackTrace();

        } catch (SAXException sxe) {
            // Error generated by this application
            // (or a parser-initialization error)
            Exception x = sxe;
            if (sxe.getException() != null)
                x = sxe.getException();
            x.printStackTrace();

        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();

        } catch (FileNotFoundException fnf) {
            JOptionPane.showMessageDialog(Seneca.getInstance(), "Last loaded file is not found ! Please try opening a new file.");

        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
            if (shouldExit) {
                System.out.println("Please check your input file..");
                System.exit(0);
            }
        }
        return document;

    }

    private void readSDDomTree() {
        if (document == null) {
            return;
        }
        org.w3c.dom.Node node = getDocStart(document);
        if (!initSD(node))
            return;
        handleSDParts(node);
    }


    public static org.w3c.dom.Node getDocStart(org.w3c.dom.Node node) {
        return getDocStart(node, "senecadataset");
    }

    public static org.w3c.dom.Node getDocStart(org.w3c.dom.Node node,
                                               String startTag) {
        org.w3c.dom.Node newNode = null;

        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            newNode = node.getChildNodes().item(f);
            logger.info(node.getNodeName().toLowerCase());
            if (node.getNodeName().trim().toLowerCase()
                    .equals(startTag.trim().toLowerCase())) {
                docStart = true;
                startNode = node;
                return startNode;
            }
        }

        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            newNode = node.getChildNodes().item(f);
            getDocStart(newNode, startTag);
            if (docStart)
                return startNode;
        }
        logger.info("Nothing found");
        return null;
    }


    private boolean initSD(org.w3c.dom.Node node) {
        sd = new SenecaDataset(node.getAttributes().getNamedItem("title")
                .getNodeValue());
        return true;
    }

    private void handleSDParts(org.w3c.dom.Node node) {
        org.w3c.dom.Node newNode = null;
        String nodeName = null;
        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            newNode = node.getChildNodes().item(f);
            if (typeName[newNode.getNodeType()].equals("Element")) {
                nodeName = newNode.getNodeName();
                if (nodeName.toLowerCase().equals("formula")) {
                    readFormula(newNode);
                }
//                if (nodeName.toLowerCase().equals("cml:molecule")) {
//                    readMolecule(newNode);
//                }
                if (nodeName.toLowerCase().equals("molecule")) {
                    readMolecule(newNode);
                }
                if (nodeName.toLowerCase().equals("spectrum")) {
                    readSpectrum(newNode);
                }
                if (nodeName.toLowerCase().equals("judge")) {
                    // readJudge(newNode);
                }
                if (nodeName.toLowerCase().equals("annealingschedules")) {
                    readAnnealingSchedules(newNode);
                    hasAnnealingOptions = true;
                }
            }
        }
        createMoleculeIfAbsent();
        addAnnealingOptions();
    }

    private void createMoleculeIfAbsent() {
        if (sd.getAtomContainer() == null) {
            IAtomContainer container = MolecularFormulaManipulator.getAtomContainer(sd.getMolecularFormula());
            System.out.println("creating molecule: " + MolecularFormulaManipulator.getString(sd.getMolecularFormula()));
            for (int i = container.getAtomCount() - 1; i >= 0; i--) {
                if (container.getAtom(i).getSymbol().equals("H")) {
                    container.removeAtom(container.getAtom(i));
                }
            }
            for (IAtom a : container.atoms()) {
                Integer an = PeriodicTable.getAtomicNumber(a.getSymbol());
                a.setImplicitHydrogenCount(0);
                if (an != null) {
                    a.setAtomicNumber(an);
                }
            }
            sd.setAtomContainer(container);
        }
    }

    private void readFormula(org.w3c.dom.Node node) {
        logger.info("readFormula");

        org.w3c.dom.Node newNode = null;
        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            newNode = node.getChildNodes().item(f);

            if (typeName[newNode.getNodeType()].equals("Text")) {
                sd.setMolecularFormula(newNode.getNodeValue());
            }
        }
    }

    private void readMolecule(org.w3c.dom.Node node) {
        logger.info("readMolecule");

        org.w3c.dom.Node newNode = null;
        IAtomContainer ac = new AtomContainer();
        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            newNode = node.getChildNodes().item(f);
            if (typeName[newNode.getNodeType()].equals("Element")) {
                if (newNode.getNodeName().toLowerCase().equals("atom")) {
                    ac.addAtom(readAtom(newNode));
                }
            }
        }
        System.out
                .println("In SpecMLReader.readMolecule: " + ac.getAtomCount());
        sd.setAtomContainer(ac);
    }

    private IAtom readAtom(org.w3c.dom.Node node) {
        logger.info("readAtom");
        org.w3c.dom.Node newNode = null;
        IAtom atom = null;
        node.getAttributes().getNamedItem("id").getNodeValue();
        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            newNode = node.getChildNodes().item(f);
            if (typeName[newNode.getNodeType()].equals("Element")) {
                if (newNode.getNodeName().toLowerCase().equals("string")) {
                    if (newNode.getAttributes().getNamedItem("builtin")
                            .getNodeValue().toLowerCase().equals("elementtype")) {
                        atom = new Atom(newNode.getChildNodes().item(0)
                                .getNodeValue());
                        Integer an = PeriodicTable.getAtomicNumber(atom.getSymbol());
                        if (an != null) {
                            atom.setAtomicNumber(an);
                        }
                    }
                }
                if (newNode.getNodeName().toLowerCase().equals("integer")) {
                    if (newNode.getAttributes().getNamedItem("builtin")
                            .getNodeValue().toLowerCase()
                            .equals("hydrogencount")) {
                        atom.setImplicitHydrogenCount(Integer.parseInt(newNode
                                .getChildNodes().item(0).getNodeValue()));
                    }
                }
                if (newNode.getNodeName().toLowerCase().equals("float")) {
                    if (newNode.getAttributes().getNamedItem("title")
                            .getNodeValue().toLowerCase()
                            .equals("assignedcarbonshift")) {
                        atom.setProperty(CDKConstants.NMRSHIFT_CARBON,
                                new Float(newNode.getChildNodes().item(0)
                                        .getNodeValue()));
                    }
                }

            }
        }
        return atom;
    }

    private void readSpectrum(org.w3c.dom.Node node) {
        logger.info("readSpectrum");
        org.w3c.dom.Node newNode = null;
        NMRSpectrum nmrspect = null;
        nmrspect = readSpectrumInfo(node);
        nmrspect.name = node.getAttributes().getNamedItem("id").getNodeValue();
        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            newNode = node.getChildNodes().item(f);
            if (typeName[newNode.getNodeType()].equals("Element")) {
                if (newNode.getNodeName().toLowerCase().equals("signal")) {
                    nmrspect.addSignal(readNMRSignal(newNode, nmrspect.nucleus));
                }
            }
        }
        logger.info("We found an nmr spectrum of type "
                + nmrspect.specType + " with values " + nmrspect.size());
        if (nmrspect.specType.equals(SenecaDataset.carbon1d_name))
            sd.carbon1D = nmrspect;
        if (nmrspect.specType.equals(SenecaDataset.dept90_name))
            sd.dept90 = nmrspect;
        if (nmrspect.specType.equals(SenecaDataset.dept135_name))
            sd.dept135 = nmrspect;
        if (nmrspect.specType.equals(SenecaDataset.hhcosy_name))
            sd.hhcosy = nmrspect;
        if (nmrspect.specType.equals(SenecaDataset.hetcor_name))
            sd.hetcor = nmrspect;
        if (nmrspect.specType.equals(SenecaDataset.ch_hetcorlr_name))
            sd.ch_hetcorlr = nmrspect;
        if (nmrspect.specType.equals(SenecaDataset.noesy_name))
            sd.noesy = nmrspect;
        if (nmrspect.specType.equals(SenecaDataset.nh_hetcorlr_name))
            sd.nh_hetcorlr = nmrspect;
    }

    private NMRSpectrum readSpectrumInfo(org.w3c.dom.Node node) {
        logger.info("readSpectrumInfo");
        org.w3c.dom.Node newNode = null;
        String type = null, solvent = null;
        float frequency = 0;
        String[] nuclei = new String[4];
        int axisinfoCounter = 0;
        NMRSpectrum nmrspect = null;
        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            newNode = node.getChildNodes().item(f);
            if (typeName[newNode.getNodeType()].equals("Element")) {
                if (newNode.getNodeName().toLowerCase().equals("spectruminfo")) {
                    node = newNode;
                    for (int g = 0; g < node.getChildNodes().getLength(); g++) {
                        newNode = node.getChildNodes().item(g);
                        if (typeName[newNode.getNodeType()].equals("Element")) {
                            if (newNode.getNodeName().toLowerCase()
                                    .equals("dimension")) {
                                if (newNode.getChildNodes().item(0) != null)
                                    Integer.parseInt(newNode.getChildNodes()
                                            .item(0).getNodeValue());
                            }
                            if (newNode.getNodeName().toLowerCase()
                                    .equals("type")) {
                                if (newNode.getChildNodes().item(0) != null)
                                    type = newNode.getChildNodes().item(0)
                                            .getNodeValue();
                            }
                            if (newNode.getNodeName().toLowerCase()
                                    .equals("frequency")) {
                                if (newNode.getChildNodes().item(0) != null)
                                    frequency = Float.parseFloat(newNode
                                            .getChildNodes().item(0)
                                            .getNodeValue());
                            }
                            if (newNode.getNodeName().toLowerCase()
                                    .equals("solvent")) {
                                if (newNode.getChildNodes().item(0) != null)
                                    solvent = newNode.getChildNodes().item(0)
                                            .getNodeValue();
                            }
                            if (newNode.getNodeName().toLowerCase()
                                    .equals("standard")) {
                                if (newNode.getChildNodes().item(0) != null)
                                    newNode.getChildNodes().item(0)
                                            .getNodeValue();
                            }
                            if (newNode.getNodeName().toLowerCase()
                                    .equals("axisinfo")) {
                                readAxisInfo(newNode, nuclei);
                                axisinfoCounter++;
                            }

                        }
                    }
                }
            }
        }
        String[] finalNuclei = new String[axisinfoCounter];
        System.arraycopy(nuclei, 0, finalNuclei, 0, finalNuclei.length);
        nmrspect = new NMRSpectrum(finalNuclei, null);
        nmrspect.setSolvent(solvent);
        nmrspect.specType = type;
        nmrspect.setSpectrometerFrequency(frequency);
        return nmrspect;
    }

    private void readAxisInfo(org.w3c.dom.Node node, String[] nuclei) {
        //logger.info("readAxisInfo");
        String nucleus = null;
        org.w3c.dom.Node newNode = null;
        int nucleiIndex = -1;
        String role = node.getAttributes().getNamedItem("role").getNodeValue();
        if (role.toLowerCase().equals("f1"))
            nucleiIndex = 0;
        if (role.toLowerCase().equals("f2"))
            nucleiIndex = 1;
        if (role.toLowerCase().equals("f3"))
            nucleiIndex = 2;
        if (role.toLowerCase().equals("f4"))
            nucleiIndex = 3;
        if (role.toLowerCase().equals("f5"))
            nucleiIndex = 4;

        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            newNode = node.getChildNodes().item(f);
            if (typeName[newNode.getNodeType()].equals("Element")) {
                if (newNode.getNodeName().toLowerCase().equals("nucleus")) {
                    nucleus = newNode.getChildNodes().item(0).getNodeValue();
                }
                if (newNode.getNodeName().toLowerCase().equals("property")) {
                    newNode.getChildNodes().item(0).getNodeValue();
                }
                if (newNode.getNodeName().toLowerCase().equals("unit")) {
                    newNode.getChildNodes().item(0).getNodeValue();
                }
            }
        }
        nuclei[nucleiIndex] = nucleus;
    }

    private NMRSignal readNMRSignal(org.w3c.dom.Node node, String[] nucleus) {
        //logger.info("readNMRSignal");
        org.w3c.dom.Node newNode = null;
        int nucleiIndex = -1;
        NMRSignal nmrSig = new NMRSignal(nucleus);
        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            newNode = node.getChildNodes().item(f);
            if (typeName[newNode.getNodeType()].equals("Element")) {
                if (newNode.getNodeName().toLowerCase().equals("location")) {
                    nucleiIndex = -1;
                    String role = newNode.getAttributes().getNamedItem("role")
                            .getNodeValue();
                    if (role.toLowerCase().equals("f1"))
                        nucleiIndex = 0;
                    if (role.toLowerCase().equals("f2"))
                        nucleiIndex = 1;
                    if (role.toLowerCase().equals("f3"))
                        nucleiIndex = 2;
                    if (role.toLowerCase().equals("f4"))
                        nucleiIndex = 3;
                    if (role.toLowerCase().equals("f5"))
                        nucleiIndex = 4;
                    if (newNode.getChildNodes().item(0) != null) {
                        nmrSig.setShift(
                                Float.parseFloat(newNode.getChildNodes()
                                        .item(0).getNodeValue()), nucleiIndex);
                    }
                }
                if (newNode.getNodeName().toLowerCase().equals("intensity")) {
                    if (newNode.getChildNodes().item(0) != null) {
                        nmrSig.intensity = Float.parseFloat(newNode
                                .getChildNodes().item(0).getNodeValue());
                    }
                }

                if (newNode.getNodeName().toLowerCase().equals("phase")) {
                    if (newNode.getChildNodes().item(0) != null) {
                        nmrSig.phase = Integer.parseInt(newNode.getChildNodes()
                                .item(0).getNodeValue());
                    }
                }
            }
        }
        return nmrSig;
    }


    private void readAnnealingSchedules(Node node) {
        org.w3c.dom.Node childNode = null;
        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            childNode = node.getChildNodes().item(f);
            if (typeName[childNode.getNodeType()].equals("Element")) {
                if (childNode.getAttributes().getNamedItem("title")
                        .getNodeValue().toLowerCase().equals("simulatedannealing")) {
                    setUpConvergenceAnnealingEngine(childNode);
                }
                if (childNode.getAttributes().getNamedItem("title")
                        .getNodeValue().toLowerCase().equals("adaptivesimulatedannealing")) {
                    setMaxStepsForAdaptiveSimulatedAnnealing(childNode);
                }
            }

        }
    }

    private void setUpConvergenceAnnealingEngine(Node node) {
        org.w3c.dom.Node childNode = null;
        ConvergenceAnnealingEngine annealingEngine = new ConvergenceAnnealingEngine();
        logger.info("Setting up parameters for simulated annealing");
        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            childNode = node.getChildNodes().item(f);
            logger.info(childNode);
            if (typeName[childNode.getNodeType()].equals("Element")) {
                if (childNode.getNodeName().toLowerCase().equals("initialacceptanceprobability")) {
                    double acceptanceProbability = Double.parseDouble(childNode.getChildNodes().item(0).getNodeValue());
                    annealingEngine.setInitialAcceptanceProbability(acceptanceProbability);
                    logger.info("Acceptance probability: " + acceptanceProbability);
                }
                if (childNode.getNodeName().toLowerCase().equals("noofsteps")) {
                    long maxUpHillSteps = Long.parseLong(childNode.getChildNodes().item(0).getNodeValue());
                    annealingEngine.setMaxUphillSteps(maxUpHillSteps);
                    logger.info("Max uphill steps: " + maxUpHillSteps);
                }
                if (childNode.getNodeName().toLowerCase().equals("plateausteps")) {
                    long maxPlateauSteps = Long.parseLong(childNode.getChildNodes().item(0).getNodeValue());
                    annealingEngine.setMaxPlateauSteps(maxPlateauSteps);
                    logger.info("Max plateau steps: " + maxPlateauSteps);
                }
                if (childNode.getNodeName().toLowerCase().equals("asymptoticcoolingfactor")) {
                    double coolingRate = Double.parseDouble(childNode.getChildNodes().item(0).getNodeValue());
                    annealingEngine.setCoolingRate(coolingRate);
                    logger.info("Cooling rate: " + coolingRate);
                }
            }

        }
        sd.annealingOptions.add(sd.ANNEALING_ENGINE, annealingEngine);
    }

    private void setMaxStepsForAdaptiveSimulatedAnnealing(Node node) {
        org.w3c.dom.Node childNode = null;
        logger.info("Setting up parameters for adaptive simulated annealing");
        for (int f = 0; f < node.getChildNodes().getLength(); f++) {
            childNode = node.getChildNodes().item(f);
            if (typeName[childNode.getNodeType()].equals("Element")) {
                if (childNode.getNodeName().toLowerCase().equals("noofsteps")) {
                    int maxSteps = Integer.parseInt(childNode.getChildNodes().item(0).getNodeValue());
                    sd.annealingOptions.add(sd.NUMBER_OF_STEPS, maxSteps);
                    logger.info("Maximum steps: " + maxSteps);
                }
            }
        }
    }


    private void addAnnealingOptions() {
        if (!hasAnnealingOptions) {
            ConvergenceAnnealingEngine annealingEngine = new ConvergenceAnnealingEngine();
            sd.annealingOptions.add(sd.ANNEALING_ENGINE, annealingEngine);
            sd.annealingOptions.add(sd.NUMBER_OF_STEPS, 5000);
        }
    }


    public SenecaDataset getSenecaDataset() {
        if (sd != null && parsingDone) {
            sd.init();
            return sd;
        }
        return null;
    }

    // private void buildAtom(org.w3c.dom.Node domNode)
    // {
    // Atom atom = new Atom();
    //
    // }
    //
    /*
      * Return children, index, and count values
      */
    public static int index(org.w3c.dom.Node node, org.w3c.dom.Node child) {
        int count = node.getChildNodes().getLength();
        for (int i = 0; i < count; i++) {
            org.w3c.dom.Node n = node.getChildNodes().item(i);
            if (child == n)
                return i;
        }
        return -1; // Should never get here.
    }

}
